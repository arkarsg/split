// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: debts.sql

package db

import (
	"context"
)

const createDebt = `-- name: CreateDebt :one
INSERT INTO debts (
    transaction_id
) VALUES (
    $1
)
RETURNING id, transaction_id, settled_amount
`

func (q *Queries) CreateDebt(ctx context.Context, transactionID int64) (Debt, error) {
	row := q.db.QueryRowContext(ctx, createDebt, transactionID)
	var i Debt
	err := row.Scan(&i.ID, &i.TransactionID, &i.SettledAmount)
	return i, err
}

const deleteDebt = `-- name: DeleteDebt :exec
DELETE FROM debts
WHERE id = $1
`

func (q *Queries) DeleteDebt(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDebt, id)
	return err
}

const getDebtById = `-- name: GetDebtById :one
SELECT id, transaction_id, settled_amount FROM debts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDebtById(ctx context.Context, id int64) (Debt, error) {
	row := q.db.QueryRowContext(ctx, getDebtById, id)
	var i Debt
	err := row.Scan(&i.ID, &i.TransactionID, &i.SettledAmount)
	return i, err
}

const getDebtByIdForUpdate = `-- name: GetDebtByIdForUpdate :one
SELECT id, transaction_id, settled_amount FROM debts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetDebtByIdForUpdate(ctx context.Context, id int64) (Debt, error) {
	row := q.db.QueryRowContext(ctx, getDebtByIdForUpdate, id)
	var i Debt
	err := row.Scan(&i.ID, &i.TransactionID, &i.SettledAmount)
	return i, err
}

const getDebtByTransactionId = `-- name: GetDebtByTransactionId :one
SELECT id, transaction_id, settled_amount FROM debts
WHERE transaction_id = $1 LIMIT 1
`

func (q *Queries) GetDebtByTransactionId(ctx context.Context, transactionID int64) (Debt, error) {
	row := q.db.QueryRowContext(ctx, getDebtByTransactionId, transactionID)
	var i Debt
	err := row.Scan(&i.ID, &i.TransactionID, &i.SettledAmount)
	return i, err
}

const updateDebt = `-- name: UpdateDebt :one
UPDATE debts
SET settled_amount = $2
WHERE id = $1
RETURNING id, transaction_id, settled_amount
`

type UpdateDebtParams struct {
	ID               int64  `json:"id"`
	NewSettledAmount string `json:"new_settled_amount"`
}

func (q *Queries) UpdateDebt(ctx context.Context, arg UpdateDebtParams) (Debt, error) {
	row := q.db.QueryRowContext(ctx, updateDebt, arg.ID, arg.NewSettledAmount)
	var i Debt
	err := row.Scan(&i.ID, &i.TransactionID, &i.SettledAmount)
	return i, err
}
