// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: debt_debtors.sql

package db

import (
	"context"
	"database/sql"
)

const createDebtDebtors = `-- name: CreateDebtDebtors :one
INSERT INTO debt_debtors (
    transaction_id,
    debtor_id,
    amount,
    currency
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING transaction_id, debtor_id, amount, currency
`

type CreateDebtDebtorsParams struct {
	TransactionID int64
	DebtorID      int64
	Amount        string
	Currency      Currency
}

func (q *Queries) CreateDebtDebtors(ctx context.Context, arg CreateDebtDebtorsParams) (DebtDebtor, error) {
	row := q.db.QueryRowContext(ctx, createDebtDebtors,
		arg.TransactionID,
		arg.DebtorID,
		arg.Amount,
		arg.Currency,
	)
	var i DebtDebtor
	err := row.Scan(
		&i.TransactionID,
		&i.DebtorID,
		&i.Amount,
		&i.Currency,
	)
	return i, err
}

const deleteDebtDebtor = `-- name: DeleteDebtDebtor :exec
DELETE FROM debt_debtors
WHERE transaction_id = $1 AND debtor_id = $2
`

type DeleteDebtDebtorParams struct {
	TransactionID int64
	DebtorID      int64
}

func (q *Queries) DeleteDebtDebtor(ctx context.Context, arg DeleteDebtDebtorParams) error {
	_, err := q.db.ExecContext(ctx, deleteDebtDebtor, arg.TransactionID, arg.DebtorID)
	return err
}

const getDebtDebtorsByTransactionAndDebtor = `-- name: GetDebtDebtorsByTransactionAndDebtor :many
SELECT transaction_id, debtor_id, amount, currency FROM debt_debtors
WHERE transaction_id = $1 AND debtor_id = $2
`

type GetDebtDebtorsByTransactionAndDebtorParams struct {
	TransactionID int64
	DebtorID      int64
}

func (q *Queries) GetDebtDebtorsByTransactionAndDebtor(ctx context.Context, arg GetDebtDebtorsByTransactionAndDebtorParams) ([]DebtDebtor, error) {
	rows, err := q.db.QueryContext(ctx, getDebtDebtorsByTransactionAndDebtor, arg.TransactionID, arg.DebtorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DebtDebtor
	for rows.Next() {
		var i DebtDebtor
		if err := rows.Scan(
			&i.TransactionID,
			&i.DebtorID,
			&i.Amount,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDebtDebtorsByTransactionId = `-- name: GetDebtDebtorsByTransactionId :many
SELECT transaction_id, debtor_id, amount, currency FROM debt_debtors
WHERE transaction_id = $1
`

func (q *Queries) GetDebtDebtorsByTransactionId(ctx context.Context, transactionID int64) ([]DebtDebtor, error) {
	rows, err := q.db.QueryContext(ctx, getDebtDebtorsByTransactionId, transactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DebtDebtor
	for rows.Next() {
		var i DebtDebtor
		if err := rows.Scan(
			&i.TransactionID,
			&i.DebtorID,
			&i.Amount,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDebtsOfDebtorId = `-- name: GetDebtsOfDebtorId :many
SELECT transaction_id, debtor_id, amount, currency FROM debt_debtors
WHERE debtor_id = $1
`

func (q *Queries) GetDebtsOfDebtorId(ctx context.Context, debtorID int64) ([]DebtDebtor, error) {
	rows, err := q.db.QueryContext(ctx, getDebtsOfDebtorId, debtorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DebtDebtor
	for rows.Next() {
		var i DebtDebtor
		if err := rows.Scan(
			&i.TransactionID,
			&i.DebtorID,
			&i.Amount,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDebtDebtor = `-- name: UpdateDebtDebtor :one
UPDATE debt_debtors
SET amount = coalesce($1, amount),
    currency = coalesce($2, currency)
WHERE transaction_id = $3 AND debtor_id = $4
RETURNING transaction_id, debtor_id, amount, currency
`

type UpdateDebtDebtorParams struct {
	Amount        sql.NullString
	Currency      NullCurrency
	TransactionId int64
	DebtorId      int64
}

func (q *Queries) UpdateDebtDebtor(ctx context.Context, arg UpdateDebtDebtorParams) (DebtDebtor, error) {
	row := q.db.QueryRowContext(ctx, updateDebtDebtor,
		arg.Amount,
		arg.Currency,
		arg.TransactionId,
		arg.DebtorId,
	)
	var i DebtDebtor
	err := row.Scan(
		&i.TransactionID,
		&i.DebtorID,
		&i.Amount,
		&i.Currency,
	)
	return i, err
}
