// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: debt_debtors.sql

package db

import (
	"context"
	"database/sql"
)

const createDebtDebtors = `-- name: CreateDebtDebtors :one
INSERT INTO debt_debtors (
    debt_id,
    debtor_id,
    amount,
    currency
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING debt_id, debtor_id, amount, currency
`

type CreateDebtDebtorsParams struct {
	DebtID   int64    `json:"debtId"`
	DebtorID int64    `json:"debtorId"`
	Amount   string   `json:"amount"`
	Currency Currency `json:"currency"`
}

func (q *Queries) CreateDebtDebtors(ctx context.Context, arg CreateDebtDebtorsParams) (DebtDebtor, error) {
	row := q.db.QueryRowContext(ctx, createDebtDebtors,
		arg.DebtID,
		arg.DebtorID,
		arg.Amount,
		arg.Currency,
	)
	var i DebtDebtor
	err := row.Scan(
		&i.DebtID,
		&i.DebtorID,
		&i.Amount,
		&i.Currency,
	)
	return i, err
}

const deleteDebtDebtor = `-- name: DeleteDebtDebtor :exec
DELETE FROM debt_debtors
WHERE debt_id = $1 AND debtor_id = $2
`

type DeleteDebtDebtorParams struct {
	DebtID   int64 `json:"debtId"`
	DebtorID int64 `json:"debtorId"`
}

func (q *Queries) DeleteDebtDebtor(ctx context.Context, arg DeleteDebtDebtorParams) error {
	_, err := q.db.ExecContext(ctx, deleteDebtDebtor, arg.DebtID, arg.DebtorID)
	return err
}

const getDebtDebtorsByDebtAndDebtor = `-- name: GetDebtDebtorsByDebtAndDebtor :one
SELECT debt_id, debtor_id, amount, currency FROM debt_debtors
WHERE debt_id = $1 AND debtor_id = $2
`

type GetDebtDebtorsByDebtAndDebtorParams struct {
	DebtID   int64 `json:"debtId"`
	DebtorID int64 `json:"debtorId"`
}

func (q *Queries) GetDebtDebtorsByDebtAndDebtor(ctx context.Context, arg GetDebtDebtorsByDebtAndDebtorParams) (DebtDebtor, error) {
	row := q.db.QueryRowContext(ctx, getDebtDebtorsByDebtAndDebtor, arg.DebtID, arg.DebtorID)
	var i DebtDebtor
	err := row.Scan(
		&i.DebtID,
		&i.DebtorID,
		&i.Amount,
		&i.Currency,
	)
	return i, err
}

const getDebtDebtorsByDebtId = `-- name: GetDebtDebtorsByDebtId :many
SELECT debt_id, debtor_id, amount, currency FROM debt_debtors
WHERE debt_id = $1
`

func (q *Queries) GetDebtDebtorsByDebtId(ctx context.Context, debtID int64) ([]DebtDebtor, error) {
	rows, err := q.db.QueryContext(ctx, getDebtDebtorsByDebtId, debtID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DebtDebtor
	for rows.Next() {
		var i DebtDebtor
		if err := rows.Scan(
			&i.DebtID,
			&i.DebtorID,
			&i.Amount,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDebtsOfDebtorId = `-- name: GetDebtsOfDebtorId :many
SELECT debt_id, debtor_id, amount, currency FROM debt_debtors
WHERE debtor_id = $1
`

func (q *Queries) GetDebtsOfDebtorId(ctx context.Context, debtorID int64) ([]DebtDebtor, error) {
	rows, err := q.db.QueryContext(ctx, getDebtsOfDebtorId, debtorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DebtDebtor
	for rows.Next() {
		var i DebtDebtor
		if err := rows.Scan(
			&i.DebtID,
			&i.DebtorID,
			&i.Amount,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDebtDebtor = `-- name: UpdateDebtDebtor :one
UPDATE debt_debtors
SET amount = coalesce($1, amount),
    currency = coalesce($2, currency)
WHERE debt_id = $3 AND debtor_id = $4
RETURNING debt_id, debtor_id, amount, currency
`

type UpdateDebtDebtorParams struct {
	Amount   sql.NullString `json:"amount"`
	Currency NullCurrency   `json:"currency"`
	DebtId   int64          `json:"debtId"`
	DebtorId int64          `json:"debtorId"`
}

func (q *Queries) UpdateDebtDebtor(ctx context.Context, arg UpdateDebtDebtorParams) (DebtDebtor, error) {
	row := q.db.QueryRowContext(ctx, updateDebtDebtor,
		arg.Amount,
		arg.Currency,
		arg.DebtId,
		arg.DebtorId,
	)
	var i DebtDebtor
	err := row.Scan(
		&i.DebtID,
		&i.DebtorID,
		&i.Amount,
		&i.Currency,
	)
	return i, err
}
