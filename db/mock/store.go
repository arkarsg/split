// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arkarsg/splitapp/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination db/mock/store.go -package mockdb github.com/arkarsg/splitapp/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/arkarsg/splitapp/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateDebt mocks base method.
func (m *MockStore) CreateDebt(arg0 context.Context, arg1 int64) (db.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDebt", arg0, arg1)
	ret0, _ := ret[0].(db.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDebt indicates an expected call of CreateDebt.
func (mr *MockStoreMockRecorder) CreateDebt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDebt", reflect.TypeOf((*MockStore)(nil).CreateDebt), arg0, arg1)
}

// CreateDebtDebtors mocks base method.
func (m *MockStore) CreateDebtDebtors(arg0 context.Context, arg1 db.CreateDebtDebtorsParams) (db.DebtDebtor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDebtDebtors", arg0, arg1)
	ret0, _ := ret[0].(db.DebtDebtor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDebtDebtors indicates an expected call of CreateDebtDebtors.
func (mr *MockStoreMockRecorder) CreateDebtDebtors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDebtDebtors", reflect.TypeOf((*MockStore)(nil).CreateDebtDebtors), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockStore) CreatePayment(arg0 context.Context, arg1 db.CreatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStoreMockRecorder) CreatePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStore)(nil).CreatePayment), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(arg0 context.Context, arg1 db.CreateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteDebt mocks base method.
func (m *MockStore) DeleteDebt(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDebt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDebt indicates an expected call of DeleteDebt.
func (mr *MockStoreMockRecorder) DeleteDebt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDebt", reflect.TypeOf((*MockStore)(nil).DeleteDebt), arg0, arg1)
}

// DeleteDebtDebtor mocks base method.
func (m *MockStore) DeleteDebtDebtor(arg0 context.Context, arg1 db.DeleteDebtDebtorParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDebtDebtor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDebtDebtor indicates an expected call of DeleteDebtDebtor.
func (mr *MockStoreMockRecorder) DeleteDebtDebtor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDebtDebtor", reflect.TypeOf((*MockStore)(nil).DeleteDebtDebtor), arg0, arg1)
}

// DeletePayment mocks base method.
func (m *MockStore) DeletePayment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayment indicates an expected call of DeletePayment.
func (mr *MockStoreMockRecorder) DeletePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayment", reflect.TypeOf((*MockStore)(nil).DeletePayment), arg0, arg1)
}

// DeleteTransaction mocks base method.
func (m *MockStore) DeleteTransaction(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockStoreMockRecorder) DeleteTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockStore)(nil).DeleteTransaction), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetDebtById mocks base method.
func (m *MockStore) GetDebtById(arg0 context.Context, arg1 int64) (db.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebtById", arg0, arg1)
	ret0, _ := ret[0].(db.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebtById indicates an expected call of GetDebtById.
func (mr *MockStoreMockRecorder) GetDebtById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebtById", reflect.TypeOf((*MockStore)(nil).GetDebtById), arg0, arg1)
}

// GetDebtByIdForUpdate mocks base method.
func (m *MockStore) GetDebtByIdForUpdate(arg0 context.Context, arg1 int64) (db.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebtByIdForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebtByIdForUpdate indicates an expected call of GetDebtByIdForUpdate.
func (mr *MockStoreMockRecorder) GetDebtByIdForUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebtByIdForUpdate", reflect.TypeOf((*MockStore)(nil).GetDebtByIdForUpdate), arg0, arg1)
}

// GetDebtByTransactionId mocks base method.
func (m *MockStore) GetDebtByTransactionId(arg0 context.Context, arg1 int64) (db.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebtByTransactionId", arg0, arg1)
	ret0, _ := ret[0].(db.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebtByTransactionId indicates an expected call of GetDebtByTransactionId.
func (mr *MockStoreMockRecorder) GetDebtByTransactionId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebtByTransactionId", reflect.TypeOf((*MockStore)(nil).GetDebtByTransactionId), arg0, arg1)
}

// GetDebtDebtorsByDebtAndDebtor mocks base method.
func (m *MockStore) GetDebtDebtorsByDebtAndDebtor(arg0 context.Context, arg1 db.GetDebtDebtorsByDebtAndDebtorParams) (db.DebtDebtor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebtDebtorsByDebtAndDebtor", arg0, arg1)
	ret0, _ := ret[0].(db.DebtDebtor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebtDebtorsByDebtAndDebtor indicates an expected call of GetDebtDebtorsByDebtAndDebtor.
func (mr *MockStoreMockRecorder) GetDebtDebtorsByDebtAndDebtor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebtDebtorsByDebtAndDebtor", reflect.TypeOf((*MockStore)(nil).GetDebtDebtorsByDebtAndDebtor), arg0, arg1)
}

// GetDebtDebtorsByDebtId mocks base method.
func (m *MockStore) GetDebtDebtorsByDebtId(arg0 context.Context, arg1 int64) ([]db.DebtDebtor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebtDebtorsByDebtId", arg0, arg1)
	ret0, _ := ret[0].([]db.DebtDebtor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebtDebtorsByDebtId indicates an expected call of GetDebtDebtorsByDebtId.
func (mr *MockStoreMockRecorder) GetDebtDebtorsByDebtId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebtDebtorsByDebtId", reflect.TypeOf((*MockStore)(nil).GetDebtDebtorsByDebtId), arg0, arg1)
}

// GetDebtsOfDebtorId mocks base method.
func (m *MockStore) GetDebtsOfDebtorId(arg0 context.Context, arg1 int64) ([]db.DebtDebtor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebtsOfDebtorId", arg0, arg1)
	ret0, _ := ret[0].([]db.DebtDebtor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebtsOfDebtorId indicates an expected call of GetDebtsOfDebtorId.
func (mr *MockStoreMockRecorder) GetDebtsOfDebtorId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebtsOfDebtorId", reflect.TypeOf((*MockStore)(nil).GetDebtsOfDebtorId), arg0, arg1)
}

// GetPaymentsByDebtId mocks base method.
func (m *MockStore) GetPaymentsByDebtId(arg0 context.Context, arg1 int64) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByDebtId", arg0, arg1)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByDebtId indicates an expected call of GetPaymentsByDebtId.
func (mr *MockStoreMockRecorder) GetPaymentsByDebtId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByDebtId", reflect.TypeOf((*MockStore)(nil).GetPaymentsByDebtId), arg0, arg1)
}

// GetPaymentsByDebtorId mocks base method.
func (m *MockStore) GetPaymentsByDebtorId(arg0 context.Context, arg1 int64) ([]db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByDebtorId", arg0, arg1)
	ret0, _ := ret[0].([]db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByDebtorId indicates an expected call of GetPaymentsByDebtorId.
func (mr *MockStoreMockRecorder) GetPaymentsByDebtorId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByDebtorId", reflect.TypeOf((*MockStore)(nil).GetPaymentsByDebtorId), arg0, arg1)
}

// GetPaymentsById mocks base method.
func (m *MockStore) GetPaymentsById(arg0 context.Context, arg1 int64) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsById", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsById indicates an expected call of GetPaymentsById.
func (mr *MockStoreMockRecorder) GetPaymentsById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsById", reflect.TypeOf((*MockStore)(nil).GetPaymentsById), arg0, arg1)
}

// GetTransactionById mocks base method.
func (m *MockStore) GetTransactionById(arg0 context.Context, arg1 int64) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionById", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionById indicates an expected call of GetTransactionById.
func (mr *MockStoreMockRecorder) GetTransactionById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionById", reflect.TypeOf((*MockStore)(nil).GetTransactionById), arg0, arg1)
}

// GetTransactionsByPayer mocks base method.
func (m *MockStore) GetTransactionsByPayer(arg0 context.Context, arg1 db.GetTransactionsByPayerParams) ([]db.GetTransactionsByPayerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByPayer", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTransactionsByPayerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByPayer indicates an expected call of GetTransactionsByPayer.
func (mr *MockStoreMockRecorder) GetTransactionsByPayer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByPayer", reflect.TypeOf((*MockStore)(nil).GetTransactionsByPayer), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// SettleDebtPaymentsTx mocks base method.
func (m *MockStore) SettleDebtPaymentsTx(arg0 context.Context, arg1 db.SettleDebtPaymentTxParams) (db.SettleDebtPaymentsTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SettleDebtPaymentsTx", arg0, arg1)
	ret0, _ := ret[0].(db.SettleDebtPaymentsTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SettleDebtPaymentsTx indicates an expected call of SettleDebtPaymentsTx.
func (mr *MockStoreMockRecorder) SettleDebtPaymentsTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SettleDebtPaymentsTx", reflect.TypeOf((*MockStore)(nil).SettleDebtPaymentsTx), arg0, arg1)
}

// UpdateDebt mocks base method.
func (m *MockStore) UpdateDebt(arg0 context.Context, arg1 db.UpdateDebtParams) (db.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDebt", arg0, arg1)
	ret0, _ := ret[0].(db.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDebt indicates an expected call of UpdateDebt.
func (mr *MockStoreMockRecorder) UpdateDebt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDebt", reflect.TypeOf((*MockStore)(nil).UpdateDebt), arg0, arg1)
}

// UpdateDebtDebtor mocks base method.
func (m *MockStore) UpdateDebtDebtor(arg0 context.Context, arg1 db.UpdateDebtDebtorParams) (db.DebtDebtor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDebtDebtor", arg0, arg1)
	ret0, _ := ret[0].(db.DebtDebtor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDebtDebtor indicates an expected call of UpdateDebtDebtor.
func (mr *MockStoreMockRecorder) UpdateDebtDebtor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDebtDebtor", reflect.TypeOf((*MockStore)(nil).UpdateDebtDebtor), arg0, arg1)
}

// UpdatePayment mocks base method.
func (m *MockStore) UpdatePayment(arg0 context.Context, arg1 db.UpdatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockStoreMockRecorder) UpdatePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockStore)(nil).UpdatePayment), arg0, arg1)
}

// UpdateTransaction mocks base method.
func (m *MockStore) UpdateTransaction(arg0 context.Context, arg1 db.UpdateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockStoreMockRecorder) UpdateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockStore)(nil).UpdateTransaction), arg0, arg1)
}
